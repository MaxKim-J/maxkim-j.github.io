{"componentChunkName":"component---src-pages-en-posts-mdx-frontmatter-slug-tsx","path":"/en/posts/frontend-tooling-ideas/","result":{"data":{"post":{"id":"1f0033e1-ce65-5201-8a02-5bc598619a9b","slug":"frontend-tooling-ideas-en","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Little things I've learned about building a React development environment\",\n  \"description\": \"No big deal\",\n  \"date\": \"2021-12-03T00:00:00.000Z\",\n  \"category\": \"tech\",\n  \"slug\": \"frontend-tooling-ideas\",\n  \"tags\": [\"react\", \"webpack\", \"babel\"],\n  \"lang\": \"en\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Recently, I've been working on a new version of the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/MaxKim-J/hufs-semester-clock-v2\"\n  }, \"Outside Clock\"), \". I'm working on a project that was developed with Vue, and I'm rebuilding it with React+Typescript. Instead of using the existing boilerplate, I created the chrome extension boilerplate from scratch, starting with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn init\"), \".\"), mdx(\"p\", null, \"I wrote all the webpack, babel, and tsconfig settings from scratch so that I could create a bundle that can be served as a chrome extension. Here's a summary of what I've learned and how it compares to what I've done.\"), mdx(\"h1\", {\n    \"id\": \"things-i-learned\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#things-i-learned\",\n    \"aria-label\": \"things i learned permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Things I learned\"), mdx(\"h2\", {\n    \"id\": \"1-webpack-loader-application-order\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#1-webpack-loader-application-order\",\n    \"aria-label\": \"1 webpack loader application order permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"1. Webpack Loader application order\"), mdx(\"p\", null, \"The webpack loader is written by specifying a particular extension and attaching the required loader for it. You can apply the loaders in different ways depending on the order of application.\"), mdx(\"p\", null, \"When writing a configuration that applies more than one loader, you can write it in the following way\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"javascript\",\n    \"theme\": \"one-light\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"// 1\\n{ ```javascript // 1\\n  test: /\\\\.ts|tsx$/,\\n  loaders: ['babel-loader'],\\n},\\n{\\n  test: /\\\\.ts|tsx$/,\\n  loaders: ['ts-loader'],\\n},\"), \"\\n        \"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"javascript\",\n    \"theme\": \"one-light\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"// 2\\n{\\n  test: /\\\\.ts|tsx$/,\\n  loaders: ['babel-loader', 'ts-loader'],\\n},\"), \"\\n        \"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://stackoverflow.com/questions/32234329/what-is-the-loader-order-for-webpack\"\n  }, \"The result is the same in both cases\"), \" When listed vertically in the full array of loaders, the lower order is applied first; when applied horizontally to the array of loaders with test, the higher order is applied first.\"), mdx(\"p\", null, \"You can think of it as wrapping functions back to back. So if you're styling with SCSS, you'll want to put \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"css-loader\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sass-loader\"), \" in that order when processing with loaders.\"), mdx(\"p\", null, \"I find the second way cleaner. It also seems like a better way to express how you want to handle resources for your project in one object.\"), mdx(\"h2\", {\n    \"id\": \"2-babel-loader-vs-babelrc\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#2-babel-loader-vs-babelrc\",\n    \"aria-label\": \"2 babel loader vs babelrc permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"2. babel Loader vs babelrc\"), mdx(\"p\", null, \"I wondered what the difference was between having babelrc in the root directory and writing config in the Webpack Babel Loader's config object.\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"javascript\",\n    \"theme\": \"one-light\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"// webpack.config.js\\n\\n{ ```\\n  test: /\\\\.(tsx?)$/,\\n  use: {\\n    loader: 'babel-loader',\\n    options: {\\n      presets: [\\n        ['@babel/preset-env', {\\n          modules: False,\\n        }],\\n        '@babel/preset-react',\\n        ['@babel/preset-typescript', {\\n          isTSX: true,\\n          allExtensions: true,\\n        }],\\n      ],\\n      plugins: [\\n      '@babel/proposal-class-properties',\\n      '@babel/plugin-syntax-dynamic-import',\\n      ],\\n    },\\n  },\\n}\\n\"), \"\\n        \"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"json\",\n    \"theme\": \"one-light\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"// babelrc\\n{\\n  \\\"plugins\\\": [\\\"@babel/proposal-class-properties\\\", \\\"@babel/plugin-syntax-dynamic-import\\\"],\\n  \\\"presets\\\": [], \\\"presets\\\".\\n    [\\n      \\\"@babel/preset-env\\\",\\n      {\\n        \\\"modules\\\": False\\n      }\\n    ],\\n    \\\"@babel/preset-react\\\",\\n    [\\n      \\\"@babel/preset-typescript\\\",\\n      {\\n        \\\"isTSX\\\": True,\\n        \\\"allExtensions\\\": True\\n      }\\n    ]\\n  ]\\n}\"), \"\\n        \"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://stackoverflow.com/questions/48476373/whats-the-difference-when-configuring-webpack-babel-loader-vs-configuring-it-wit\"\n  }, \"No difference in results\"), \" Basically, if you put babelrc in the root, babel-loader will find it and apply it. Obviously, you don't need to create both.\"), mdx(\"p\", null, \"However, putting babelrc in the root directory allows for a more scalable setup. Storybook will look for and apply babelrc in the root directory at build time. You can choose whether you want this to be a configuration specific to your webpack, or one that is shared with other runtimes like Storybook.\"), mdx(\"h2\", {\n    \"id\": \"3-babel-preset-plugin-application-order\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#3-babel-preset-plugin-application-order\",\n    \"aria-label\": \"3 babel preset plugin application order permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"3. babel preset, plugin application order\"), mdx(\"p\", null, \"When writing the babel config, we list the required plugins and presets in an array, and I was curious about the order in which they are applied.\"), mdx(\"p\", null, \"According to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://babeljs.io/docs/en/plugins#plugin-ordering\"\n  }, \"babel docs\"), \", plugins are executed before presets. Plugins are then executed from the front of the array to the back. Presets are executed from the back index of the array forward. If I display the order in the babel config example I showed above, it looks like this.\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"json\",\n    \"theme\": \"one-light\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"{\\n  \\\"plugins\\\": [ \\\"plugins\\\".\\n    \\\"@babel/proposal-class-properties\\\", // 1st\\n    \\\"@babel/plugin-syntax-dynamic-import\\\" // 2nd\\n  ],\\n  \\\"presets\\\": [\\n    [\\n      \\\"@babel/preset-env\\\",\\n      {\\n        // 5th\\n        \\\"modules\\\": False\\n      }\\n    ],\\n    \\\"@babel/preset-react\\\", // 4th\\n    [ \\\"@babel/preset-typescript\\n      \\\"@babel/preset-typescript\\\",\\n      {\\n        // 3rd\\n        \\\"isTSX\\\": True,\\n        \\\"allExtensions\\\": true\\n      }\\n    ]\\n  ]\\n}\"), \"\\n        \"), mdx(\"p\", null, \"Sometimes the order in which presets or plugins are applied is important. If you're using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://emotion.sh/docs/css-prop\"\n  }, \"emotion CSS props\"), \" for styling, you can use the Babel plugin (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@emotion/babel-preset-css-prop\"), \") to set them up. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://emotion.sh/docs/@emotion/babel-preset-css-prop#usage\"\n  }, \"Docks\"), \" says to place them after \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@babel/preset-react\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@babel/preset-typescript\"), \" if you're using them together. The idea is that they should be applied sooner.\"), mdx(\"p\", null, \"The plugin uses the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jsx\"), \" function in the emotion/react library to apply emotion's css props to JSX, which should normally be turned into a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://emotion.sh/docs/@emotion/babel-preset-css-prop#features\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"React.createElement\")), \", so if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@babel/preset-react\"), \", which turns JSX into a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.createElement\"), \", is applied first, the plugin won't work properly.\"), mdx(\"p\", null, \"In fact, given that a preset is a collection of plugins, the semantics of plugins and presets are almost equivalent, so I think it's entirely possible that in some situations, following the execution order of presets and plugins as suggested by babel will cause the plugins to be out of order between the preset and the plugin.\"), mdx(\"p\", null, \"On a related note, there was an open \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/babel/babel/pull/5735\"\n  }, \"discussion and PR\"), \" to allow you to customize babel's plugin calling order. I don't think the PR has been closed yet, but there hasn't been any activity recently.\"), mdx(\"h2\", {\n    \"id\": \"4-good-settings-for-tree-shaking\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#4-good-settings-for-tree-shaking\",\n    \"aria-label\": \"4 good settings for tree shaking permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"4. Good settings for tree shaking\"), mdx(\"p\", null, \"In order for tree shaking to remove dead code by determining the code and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"export\"), \" of unused libraries, we need a few settings in the development environment. If you're curious about tree shaking in Webpack, check out \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://ui.toast.com/weekly-pick/ko_20180716\"\n  }, \"this article\"), \"!\"), mdx(\"p\", null, \"During the build process, webpack categorizes code and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"export\"), \"s to show where they are not needed, and terser, a tool that helps compress code in the final stages of bundling, removes code that is not needed.\"), mdx(\"p\", null, \"Tree shaking is only possible in an ESM module environment, which natively allows for static analysis of modules, so you should try to keep your code as written in ESM as much as possible, until terser in webpack removes dead code and minifies it.\"), mdx(\"p\", null, \"Once you set the value of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"module\"), \" attribute in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tsconfig\"), \" to ESNext or ES6, it will become a typescript transfile with the ESM module preserved.\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"json\",\n    \"theme\": \"one-light\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"{\\n  \\\"compilerOptions\\\" : {\\n  \\\"module\\\": \\\"ESNext\\\",\\n  ...\\n  }\\n}\"), \"\\n        \"), mdx(\"p\", null, \"In subsequent babel configurations, setting the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"modules\"), \" setting in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@babel/preset-env\"), \" to false will prevent ESM modules from being replaced with cjs.\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"json\",\n    \"theme\": \"one-light\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"{\\n  \\\"presets\\\": [\\n    [\\n      \\\"@babel/preset-env\\\",\\n      {\\n      \\\"targets\\\": {\\\"chrome\\\": \\\"58\\\"},\\n      \\\"modules\\\": False,\\n      ...\\n      }\\n    ]\\n  ]\\n}\"), \"\\n        \"), mdx(\"p\", null, \"When I first came across this information, I had a simple thought: if I keep ESM, won't I be breaking browser compatibility because the final bundled output will come out in ESM? \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://ui.toast.com/weekly-pick/ko_20180716#babel%EB%A1%9C-es6-%EB%AA%A8%EB%93%88%EC%9D%B4-commonjs-%EB%AA%A8%EB%93%88%EB%A1%9C-%EB%B3%80%ED%99%98%EB%90%98%EB%8A%94-%EA%B2%83-%EB%A7%89%EA%B8%B0\"\n  }, \"after all, webpack is converting the code into a universally usable form\")), mdx(\"h1\", {\n    \"id\": \"choice\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#choice\",\n    \"aria-label\": \"choice permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Choice.\"), mdx(\"p\", null, \"As you organize your development environment with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"babel\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tsc\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"webpack\"), \", there are situations where the same thing can be done with both tools. Here's a quick comparison of what to choose in this case.\"), mdx(\"h2\", {\n    \"id\": \"typescript--tsc-vs-babelpreset-typescript\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#typescript--tsc-vs-babelpreset-typescript\",\n    \"aria-label\": \"typescript  tsc vs babelpreset typescript permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"TypeScript : tsc vs @babel/preset-typescript\"), mdx(\"p\", null, \"You can choose whether to write tsc or babel in your TypeScript transpiles, and it's a fairly well-known choice. I came across \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://ui.toast.com/weekly-pick/ko_20180716#babel%EB%A1%9C-es6-%EB%AA%A8%EB%93%88%EC%9D%B4-commonjs-%EB%AA%A8%EB%93%88%EB%A1%9C-%EB%B3%80%ED%99%98%EB%90%98%EB%8A%94-%EA%B2%83-%EB%A7%89%EA%B8%B0\"\n  }, \"this article\"), \" and realized that babel can be written to a typescript transfile.\"), mdx(\"p\", null, \"While making boilerplate this time, I agreed with the above post that it's not easy to use two compilers together. The order of things was confusing and there was a lot to think about. If you do the TypeScript transpile in babel, you can convert almost everything you need for bundling with just babel.\"), mdx(\"p\", null, \"The advantage of using babel is that it's faster.](\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/JaeYeopHan/tip-archive/issues/30\"\n  }, \"https://github.com/JaeYeopHan/tip-archive/issues/30\"), \") TSC is slower because it scans the d.ts of all the libraries inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node_modules\"), \" to make sure they're working correctly, creates a type declaration file (index.d.ts) for the current project, and does type chaining every time it builds. On the other hand, babel is faster because it compiles by simply stripping out the TypeScript syntax.\"), mdx(\"p\", null, \"However, this makes babel unusable in cases where you need to create a type declaration file together (such as library development).\"), mdx(\"p\", null, \"I think I was hesitant to use it at first because of the fact that it doesn't check build-time types - humans can't always be meticulous, and catching build-time type errors makes for a more robust product. However, it seems like this is a point that can be compensated for by building additional environments that can check for type errors on demand, or with the help of eslint.\"), mdx(\"p\", null, \"But still, I'm not sure if I would be diligent enough to run type checking when I separate it... If there is an error when type checking with tsc at the CI/CD stage, integration is not possible... I think I need to think of another tool that can enforce type compliance.\"), mdx(\"p\", null, \"And it seems like there are more unsupported grammars than tsc, so it would be a bit troublesome to install and maintain a plugin for that.\"), mdx(\"p\", null, \"I'm using tsc for the outer clocks project, but I'd like to experiment with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@babel/preset-typescript\"), \" as a POC first.\"), mdx(\"h2\", {\n    \"id\": \"jsx--tsconfig-vs-babelpreset-react\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#jsx--tsconfig-vs-babelpreset-react\",\n    \"aria-label\": \"jsx  tsconfig vs babelpreset react permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"JSX : tsconfig vs @babel/preset-react\"), mdx(\"p\", null, \"The difference is whether you do the JSX conversion in the TypeScript transpile step or using @babel/preset-react. Again, you can do either one. JSX transformation while applying the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/max-kim-tutorial/client-advanced/tree/master/24_frontend-tooling\"\n  }, \"New JSX Transform\"), \", which is supported since React 17, can be done with settings in either \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tsconfig\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"babelrc\"), \".\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"javascript\",\n    \"theme\": \"one-light\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"// babelrc\\n// If you want to transform JSX in babel, the jsx setting in tsconfig should be preserve (preserve JSX)\\n{\\n  \\\"presets\\\": [].\\n    [\\\"@babel/preset-react\\\", {\\n    \\\"runtime\\\": \\\"automatic\\\"\\n    }]\\n  ]\\n}\\n\\n// or tsconfig\\n// Support for the New JSX Transform starting with TS 4.1.\\n{ }\\n  jsx: 'react-jsx',\\n  ...\\n}\"), \"\\n        \"), mdx(\"p\", null, \"I thought it would be better to set it in tsconfig. It's because I don't need to install and use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@babel/preset-react\"), \". Why install another plugin when there is an option available in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tsconfig\"), \"? In other words, I don't need to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@babel/preset-react\"), \" in React projects that don't know JS but use TS...? I've been thinking a bit.\"), mdx(\"p\", null, \"Using tsconfig also makes it easier to apply emotion, you don't need to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@emotion/babel-preset-css-prop\"), \", you just need to add one more setting in tsconfig, which will allow you to convert JSX via emotion's JSX functions.\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"json\",\n    \"theme\": \"one-light\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"{\\n  \\\"compilerOptions\\\" : {\\n  \\\"jsx\\\": \\\"react-jsx\\\",\\n  \\\"jsxImportSource\\\": \\\"@emotion/react\\\",\\n  ...\\n  }\\n}\"), \"\\n        \"), mdx(\"p\", null, \"TypeScript supports several JSX conversion options. You can check them out \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.typescriptlang.org/docs/handbook/jsx.html\"\n  }, \"here\"), \"!\"), mdx(\"h2\", {\n    \"id\": \"es5-just-babel\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#es5-just-babel\",\n    \"aria-label\": \"es5 just babel permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"ES5: Just Babel\"), mdx(\"p\", null, \"If you set the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \" property in tsc's tsconfig option to ES5, the transpile will be done to ES5.\"), mdx(\"p\", null, \"However, it is unlikely that you will ever use tsc without babel when developing a web application. This is because \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@babel/preset-env\"), \" allows you to set browser compatibility options, set the right settings for tree shaking, and many other options for web development.\"), mdx(\"p\", null, \"Since ES5 conversion was originally babel's own thing, it seems right to leave ES5 transpilation of web applications to babel.\"), mdx(\"h1\", {\n    \"id\": \"closing-thoughts\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#closing-thoughts\",\n    \"aria-label\": \"closing thoughts permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Closing thoughts\"), mdx(\"p\", null, \"These are some of the things I've learned recently about building front-end development environments.\"), mdx(\"p\", null, \"While it's easy to Google \\\"how to do it\\\", I think digging a little deeper has given me a better understanding of how the build process works, which tools to choose, and what exactly each tool does.\"), mdx(\"p\", null, \"It's still pretty hard for me to make decisions about my build environment because I'm not sure if this is the best way to go.\"), mdx(\"p\", null, \"The difference between the results is not immediately apparent like making a web screen, and I feel like I can only create an environment that is comfortable for development. I would like to become a developer who can create the best build results in various situations by gaining more know-how.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Little things I've learned about building a React development environment","date":"2021년 12월 03일","description":"No big deal","tags":["react","webpack","babel"]}},"postSlugList":{"nodes":[{"frontmatter":{"slug":null}},{"frontmatter":{"slug":null}},{"frontmatter":{"slug":null}},{"frontmatter":{"slug":null}},{"frontmatter":{"slug":"mad-max"}},{"frontmatter":{"slug":"mad-max"}},{"frontmatter":{"slug":"how-to-growth"}},{"frontmatter":{"slug":"how-to-growth"}},{"frontmatter":{"slug":"olivia-rodrigo"}},{"frontmatter":{"slug":"olivia-rodrigo"}},{"frontmatter":{"slug":"2023-flexteam-restrospect"}},{"frontmatter":{"slug":"2023-retorspect"}},{"frontmatter":{"slug":"2023-flexteam-restrospect"}},{"frontmatter":{"slug":"2023-retorspect"}},{"frontmatter":{"slug":"tkdodo-react-query-commentary"}},{"frontmatter":{"slug":"tkdodo-react-query-commentary"}},{"frontmatter":{"slug":"on-stage-best"}},{"frontmatter":{"slug":"on-stage-best"}},{"frontmatter":{"slug":"nodejs-server-monitoring"}},{"frontmatter":{"slug":"nodejs-server-monitoring"}},{"frontmatter":{"slug":"i-can-do-this-all-day"}},{"frontmatter":{"slug":"i-can-do-this-all-day"}},{"frontmatter":{"slug":"retrospect-university"}},{"frontmatter":{"slug":"retrospect-university"}},{"frontmatter":{"slug":"module-federation-shared"}},{"frontmatter":{"slug":"module-federation-shared"}},{"frontmatter":{"slug":"tanjiro"}},{"frontmatter":{"slug":"tanjiro"}},{"frontmatter":{"slug":"module-federation-concepts"}},{"frontmatter":{"slug":"module-federation-concepts"}},{"frontmatter":{"slug":"eternal-sunshine"}},{"frontmatter":{"slug":"eternal-sunshine"}},{"frontmatter":{"slug":"business-driven"}},{"frontmatter":{"slug":"business-driven"}},{"frontmatter":{"slug":"uncertainty"}},{"frontmatter":{"slug":"uncertainty"}},{"frontmatter":{"slug":"runtime-integration-micro-frontends"}},{"frontmatter":{"slug":"runtime-integration-micro-frontends"}},{"frontmatter":{"slug":"tanstack-query-v4-preview"}},{"frontmatter":{"slug":"tanstack-query-v4-preview"}},{"frontmatter":{"slug":"writing-like-that"}},{"frontmatter":{"slug":"writing-like-that"}},{"frontmatter":{"slug":"2022-retorspect"}},{"frontmatter":{"slug":"2022-retorspect"}},{"frontmatter":{"slug":"monorepo-tooling"}},{"frontmatter":{"slug":"monorepo-tooling"}},{"frontmatter":{"slug":"break-up"}},{"frontmatter":{"slug":"break-up"}},{"frontmatter":{"slug":"sustainable-aimless"}},{"frontmatter":{"slug":"sustainable-aimless"}},{"frontmatter":{"slug":"job-searching-retrospect"}},{"frontmatter":{"slug":"job-searching-retrospect"}},{"frontmatter":{"slug":"2021-retorspect"}},{"frontmatter":{"slug":"2021-retorspect"}},{"frontmatter":{"slug":"web-accessiblity-virtuous-cycle"}},{"frontmatter":{"slug":"web-accessiblity-virtuous-cycle"}},{"frontmatter":{"slug":"frontend-tooling-ideas"}},{"frontmatter":{"slug":"frontend-tooling-ideas"}},{"frontmatter":{"slug":"suspense-argibraic-effect"}},{"frontmatter":{"slug":"suspense-argibraic-effect"}},{"frontmatter":{"slug":"packet-travel"}},{"frontmatter":{"slug":"packet-travel"}},{"frontmatter":{"slug":"dev-job-retrospect"}},{"frontmatter":{"slug":"dev-job-retrospect"}},{"frontmatter":{"slug":"redux-store-structure"}},{"frontmatter":{"slug":"redux-store-structure"}},{"frontmatter":{"slug":"react-native-ci-cd"}},{"frontmatter":{"slug":"react-native-ci-cd"}},{"frontmatter":{"slug":"like-legacy"}},{"frontmatter":{"slug":"like-legacy"}},{"frontmatter":{"slug":"what-type-of-developer-am-i"}},{"frontmatter":{"slug":"what-type-of-developer-am-i"}},{"frontmatter":{"slug":"how-to-minimize-redux-saga-typing"}},{"frontmatter":{"slug":"how-to-minimize-redux-saga-typing"}},{"frontmatter":{"slug":"how-to-use-redux-saga"}},{"frontmatter":{"slug":"how-to-use-redux-saga"}},{"frontmatter":{"slug":"github-actions-slack-bot"}},{"frontmatter":{"slug":"github-actions-slack-bot"}},{"frontmatter":{"slug":"frontend-infrastructure"}},{"frontmatter":{"slug":"frontend-infrastructure"}},{"frontmatter":{"slug":"react-query-preview"}},{"frontmatter":{"slug":"react-query-preview"}},{"frontmatter":{"slug":"keyboard-input"}},{"frontmatter":{"slug":"keyboard-input"}},{"frontmatter":{"slug":"precedent-bot-retrospect"}},{"frontmatter":{"slug":"precedent-bot-retrospect"}},{"frontmatter":{"slug":"nuxt-ssr"}},{"frontmatter":{"slug":"nuxt-ssr"}},{"frontmatter":{"slug":"async-console-log"}},{"frontmatter":{"slug":"async-console-log"}},{"frontmatter":{"slug":"thought-ts"}},{"frontmatter":{"slug":"thought-ts"}},{"frontmatter":{"slug":"dev-job-after-junior"}},{"frontmatter":{"slug":"dev-job-after-junior"}},{"frontmatter":{"slug":"protect-var-against-undefined"}},{"frontmatter":{"slug":"protect-var-against-undefined"}},{"frontmatter":{"slug":"school-personal-project"}},{"frontmatter":{"slug":"school-personal-project"}},{"frontmatter":{"slug":"vue-comp-test"}},{"frontmatter":{"slug":"vue-comp-test"}},{"frontmatter":{"slug":"dom-pos-scroll"}},{"frontmatter":{"slug":"dom-pos-scroll"}},{"frontmatter":{"slug":"2020-retorspect"}},{"frontmatter":{"slug":"2020-retorspect"}},{"frontmatter":{"slug":"function-props-vuejs"}},{"frontmatter":{"slug":"function-props-vuejs"}},{"frontmatter":{"slug":"cra-webpack-config"}},{"frontmatter":{"slug":"cra-webpack-config"}},{"frontmatter":{"slug":"react-component-this"}},{"frontmatter":{"slug":"react-component-this"}},{"frontmatter":{"slug":"git-start"}},{"frontmatter":{"slug":"git-start"}},{"frontmatter":{"slug":"js-pure-function"}},{"frontmatter":{"slug":"js-pure-function"}},{"frontmatter":{"slug":"hufs-semester-clock"}},{"frontmatter":{"slug":"hufs-semester-clock"}},{"frontmatter":{"slug":"js-map"}},{"frontmatter":{"slug":"js-map"}},{"frontmatter":{"slug":"why-dev"}},{"frontmatter":{"slug":"why-dev"}}]}},"pageContext":{"id":"1f0033e1-ce65-5201-8a02-5bc598619a9b","frontmatter__slug":"frontend-tooling-ideas","__params":{"frontmatter__slug":"frontend-tooling-ideas"}}},"staticQueryHashes":["1865044719"]}