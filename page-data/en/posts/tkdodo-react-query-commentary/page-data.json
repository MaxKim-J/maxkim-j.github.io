{"componentChunkName":"component---src-pages-en-posts-mdx-frontmatter-slug-tsx","path":"/en/posts/tkdodo-react-query-commentary/","result":{"data":{"post":{"id":"6ffd3caa-6ee9-5fc6-aa1c-bf1afbe6d7d5","slug":"tkdodo-react-query-commentary-en","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Using React Query in better ways\",\n  \"description\": \"tkdodo React Query post commentary (1-11)\",\n  \"date\": \"2023-12-10T00:00:00.000Z\",\n  \"category\": \"tech\",\n  \"slug\": \"tkdodo-react-query-commentary\",\n  \"tags\": [\"react\", \"react-query\"],\n  \"lang\": \"en\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Recently, we were discussing how to write better React Query for our company, and one of the contributors to React Query, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://tkdodo.eu/blog\"\n  }, \"tkdodo\"), \", wrote a series of posts on React Query. It was a really good reference with a lot of thoughts and practices for writing better React Query.\"), mdx(\"p\", null, \"I've been reading through the threads lately. There are currently 23 posts, and I've read about half of them, 11 posts, and I've written a short book review for each one, summarizing/quoting the content and adding my own thoughts and feelings. I'll try to finish reading them and write a second installment later.\"), mdx(\"h1\", {\n    \"id\": \"1-practical-react-query\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#1-practical-react-query\",\n    \"aria-label\": \"1 practical react query permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"https://tkdodo.eu/blog/practical-react-query\"\n  }, \"1. practical react query\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"So it seems that we have always been treating this \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"server state\"), \" like any other \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"client state\"), \". Except that when it comes to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"server state\"), \" (think: A list of articles that you fetch, the details of a User you want to display, ...), your app does not own it. We have only \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"borrowed\"), \" it to display the most recent version of it on the screen for the user. It is the server who owns the data.\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"To me, that introduced a paradigm shift in how to think about data. If we can leverage the cache to display data that \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"we do not own\"), \", there isn't really much left that is real client state that \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"also\"), \" needs to be made available to the whole app.\")), mdx(\"p\", null, \"The idea of data as ownership is something I've felt since my first exposure to RQ.\"), mdx(\"p\", null, \"By saying that the client is only responsible for borrowing data from the server and showing the most recent version, it clarifies the responsibilities of data ownership. This distinction seems to be the starting point for the library's existence, and also clarifies where the roadmap for development should focus.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"(Don't use the queryCache as a local state manager) If you tamper with the queryCache (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"queryClient.setQueryData\"), \"), it should only be for optimistic updates or for writing data that you receive from the backend after a mutation. Remember that every background refetch might override that data, so \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://reactjs.org/docs/hooks-state.html\"\n  }, \"use\"), \" \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://zustand.surge.sh/\"\n  }, \"something\"), \" \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://redux.js.org/\"\n  }, \"else\"), \" for local state.\")), mdx(\"p\", null, \"This was interpreted as saying to avoid setting data explicitly as much as possible. In context, it seems like they're trying to make sure that the behavior we talked about earlier, the separation of state and background fetching, happens as much as possible as intended.\"), mdx(\"p\", null, \"The \\\"use something else\\\" suggested is react's state, zustand, and redux, but RQ also has a top-down state management with providers, so I wonder if I'm suggesting the right tools in this context.\"), mdx(\"h1\", {\n    \"id\": \"2-react-query-data-transformations\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#2-react-query-data-transformations\",\n    \"aria-label\": \"2 react query data transformations permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"https://tkdodo.eu/blog/react-query-data-transformations\"\n  }, \"2. React Query Data Transformations\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"On the backend\"))), mdx(\"p\", null, \"I think you bring up a good point because sometimes I forget that I can transform data on the backend. It's not all on me, after all.\"), mdx(\"p\", null, \"Some data transformations are better done on the backend, and if you have multiple clients borrowing data, it's better to ensure uniformity on the backend. The more logic that changes data on the backend, the more it's in the client, the harder it's always been to determine what's happening where.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"But if you pass a selector, you are now only subscribed to the result of the selector function. This is quite powerful,\")), mdx(\"p\", null, \"selectors also serve to narrow down the changes a query should watch for.\"), mdx(\"p\", null, \"In fact, this post shows the places where we change data (backend, queryFn, render function, select), and while \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"select\"), \" seems like the least disadvantageous of the three, it's not the only one.\"), mdx(\"p\", null, \"In my experience, there are quite a few situations where it's better to just put the backend's response into the result of a query. It's a simpler mental model to have a 1:1 correspondence between the query and the specific backend data, and it's better to work from a common understanding of what the backend's response looks like so that multiple workers can easily see what the data looks like in documentation, etc. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"select\"), \" could easily become implicit, or even cause redundant patching if you hooked into a query with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"select\"), \" set, and then couldn't get the data you wanted from a particular function.\"), mdx(\"p\", null, \"In the end, I realized that it might be more scalable to keep the backend response in the query and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"select\"), \" the response from the query, which would allow for frequent data transformations in the render function, since writing another query to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"select\"), \" the response from the original query might seem like overkill.\"), mdx(\"h1\", {\n    \"id\": \"3-react-query-render-optimizations\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#3-react-query-render-optimizations\",\n    \"aria-label\": \"3 react query render optimizations permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"https://tkdodo.eu/blog/react-query-render-optimizations\"\n  }, \"3. React Query Render Optimizations\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Render optimizations are an advanced concept for any app. React Query already comes with very good optimizations and defaults out of the box, and most of the time, no further optimizations are needed.\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"I'd take an \\\"unnecessary re-render\\\" over a \\\"missing render-that-should-have-been-there\\\" all day every day.\")), mdx(\"p\", null, \"It seems like \\\"optimize\\\" and \\\"don't re-render\\\" always go hand in hand when it comes to React. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://kentcdodds.com/blog/fix-the-slow-render-before-you-fix-the-re-render\"\n  }, \"see also this great article by Kent Dodds\"), \".\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"I'm quite proud of this feature, given that it was my first major contribution to the library. If you set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"notifyOnChangeProps\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"'tracked'\"), \", React Query will keep track of the fields you are using during render, and will use this to compute the list.\")), mdx(\"p\", null, \"I think tracked query, which has been the default since v4, is a really nice feature: it brings what you need to care about into the library appropriately, and the only interface that goes out is a single setting.\"), mdx(\"p\", null, \"It's not like understanding anything more than just pulling out the properties you need is essential to running the app or using the library, and I don't feel like it's necessary even for a significant edge case.\"), mdx(\"p\", null, \"Isn't it a virtue from a library implementation point of view to understand the functionality of these attributes and bring them neatly into the library? from a library implementation perspective.\"), mdx(\"blockquote\", null, mdx(\"ul\", {\n    parentName: \"blockquote\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If you use \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/tc39/proposal-object-rest-spread/blob/6ee4ce3cdda246746fc46fb149bb8b43c28e704d/Rest.md\"\n  }, \"object rest destructuring\"), \", you are effectively observing all fields. Normal destructuring is fine, just don't do this:\"))), mdx(\"p\", null, \"Destructuring with the unfold operator is said to break the effectiveness of tracked queries.\"), mdx(\"h1\", {\n    \"id\": \"4-status-checks-in-react-query\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#4-status-checks-in-react-query\",\n    \"aria-label\": \"4 status checks in react query permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"https://tkdodo.eu/blog/status-checks-in-react-query\"\n  }, \"4. Status Checks in React Query\")), mdx(\"blockquote\", null, mdx(\"ul\", {\n    parentName: \"blockquote\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"success\"), \": Your query was successful, and you have \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"data\"), \" for it\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"error\"), \": Your query did not work, and an \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"error\"), \" is set\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"pending\"), \": Your query has no data\"))), mdx(\"p\", null, \"This is an explanation of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"status\"), \", which was changed since v4 \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://maxkim-j.github.io/posts/tanstack-query-v4-preview#the-idle-state-has-been-removed\"\n  }, \"I think it's better explained by the split between \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"status\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"fetchStatus\")), \" The mental model is simple because \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"status\"), \" is based on the presence or absence of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data\"), \". In v5, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"loading\"), \" was renamed to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pending\"), \". This was done \", \"[primarily]\", \" because pending is a better name for the absence of data.](\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/TanStack/query/discussions/4252\"\n  }, \"https://github.com/TanStack/query/discussions/4252\"), \") This makes sense if you think about the pending state of a promise.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"This is even more relevant when we take into account that React Query will retry failed queries three times per default with exponential backoff, so it might take a couple of seconds until the stale data is replaced with the error screen. If you also have no background fetching indicator, this can be really perplexing. This is why I usually check for data-availability first:\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"retry\"), \" defaults to 3 times on fetch failures, so if you bring up the error view when an error occurs, it's going to be quite a while before you see the error on screen. This is why I say it's a better practice to branch by finding out if data is available first, rather than by errors or loading status.\"), mdx(\"p\", null, \"If you do it like the example shown, you'll always show the data if it's there, regardless of whether there's a refetch error or not.\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"tsx\",\n    \"theme\": \"one-light\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"// data-first\\nconst todos = useTodos();\\n\\nif (todos.data) {\\n  return <div>{todos.data.map(renderTodo)}</div>;\\n}\\n\\nif (todos.error) {\\n  return 'An error has occurred: ' + todos.error.message;\\n}\\n\\n} return 'Loading...';\"), \"\\n        \"), mdx(\"h1\", {\n    \"id\": \"5-testing-react-query\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#5-testing-react-query\",\n    \"aria-label\": \"5 testing react query permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"https://tkdodo.eu/blog/testing-react-query\"\n  }, \"5. Testing React Query\")), mdx(\"p\", null, \"I like the way the article is organized, first explaining a good way to mock the backend API, then explaining the RQ-specific parts, and then giving some testing tips.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"It's one of the most common \\\"gotchas\\\" with React Query and testing: The library defaults to three retries with exponential backoff, which means that your tests are likely to timeout if you want to test an erroneous query. The easiest way to turn retries off is, again, via the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"QueryClientProvider\"), \".\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"QueryClient\"), \" for testing means that you want to turn off the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"retry\"), \" option.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The best advice I can give you for this problem is: Don't set these options on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useQuery\"), \" directly. Try to use and override the defaults as much as possible, and if you really need to change something for specific queries, use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults\"\n  }, \"queryClient.setQueryDefaults\"), \".\")), mdx(\"p\", null, \"There is an API, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setQueryDefaults\"), \", that allows you to change the options for specific queries to suit the context of your test. I realized that if I used this directly in the application and not in a test, I would have no idea where the settings came from and might cause a brain freeze.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Since React Query is async by nature, when running the hook, you won't immediately get a result. It usually will be in loading state and without data to check\")), mdx(\"p\", null, \"It goes without saying that we should expect asynchronous test results.\"), mdx(\"h1\", {\n    \"id\": \"6-react-query-and-typescript\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#6-react-query-and-typescript\",\n    \"aria-label\": \"6 react query and typescript permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"https://tkdodo.eu/blog/react-query-and-type-script\"\n  }, \"6. React Query and TypeScript\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"If you (like me) like to keep your api layer separated from your queries, you'll need to add type definitions anyway to avoid \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"implicit any\"), \", so React Query can infer the rest:\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Since React Query is not in charge of the function that returns the Promise, it also can't know what type of errors it might produce. So \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"unknown\"), \" is correct.\")), mdx(\"p\", null, \"To get the most out of type inference, you should give the function that goes into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"queryFn\"), \" a return type, and handle the error type directly since it's unknown (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"unknown\"), \") unless you give it a generic.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"It will further help TypeScript to narrow types when using the status field or one of the status booleans, which it cannot do if you use destructuring:\")), mdx(\"p\", null, \"The return value of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useQuery\"), \" is inferred based on the set value, so using it without destructuring is better for type inference. However, this seems to conflict with the tracked query, which says that only the properties you need should be destructured to work well.\"), mdx(\"h1\", {\n    \"id\": \"7-using-websockets-with-react-query\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#7-using-websockets-with-react-query\",\n    \"aria-label\": \"7 using websockets with react query permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"https://tkdodo.eu/blog/using-web-sockets-with-react-query\"\n  }, \"7. Using WebSockets with React Query\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"React Query doesn't have anything built-in specifically for WebSockets. That doesn't mean that WebSockets are not supported or that they don't work well with the library. It's just that React Query is \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"very\"), \" agnostic when it comes to how you fetch your data: All it needs is a resolved or rejected \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Promise\"), \" to work - the rest is up to you.\")), mdx(\"p\", null, \"React Query doesn't explicitly have a specific implementation to support websockets, because it just needs to work on a promise basis. In fact, this concept makes it so that it doesn't matter where or how you get your data. I'm glad you pointed this out.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"This goal overlaps a lot with WebSockets, which update your data in real-time. Why would I need to refetch at all if I just manually \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"invalidated\"), \" because the server just told me to do so via a dedicated message?\")), mdx(\"p\", null, \"Since WebSockets explicitly update and invalidate data on an event-driven basis, you may not need to assume that it gets stale over time, so I guess that means that it's probably okay to take \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"staleTime\"), \" to be \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Infinity\"), \".\"), mdx(\"h1\", {\n    \"id\": \"8-effective-react-query-keys\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#8-effective-react-query-keys\",\n    \"aria-label\": \"8 effective react query keys permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"https://tkdodo.eu/blog/effective-react-query-keys\"\n  }, \"8. Effective React Query Keys\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"If you have some \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"state\"), \" that changes your data, all you need to do is to put it in the Query Key, because React Query will trigger a refetch automatically whenever the key changes. So when you want to apply your filters, just change your \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"client state\"), \":\")), mdx(\"p\", null, \"Don't put \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"refetch\"), \" in the handler to fetch it, change the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"queryKey\"), \" to make it fetch again. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"refetch\"), \" is not meant to be used when you want to re-request with different parameters.\"), mdx(\"p\", null, \"It is understood as a usage that is required to write and handle queries declaratively. It also ties in with what we talked about in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://tkdodo.eu/blog/practical-react-query#treat-the-query-key-like-a-dependency-array\"\n  }, \"Treat the query key like a dependency array\"), \".\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Manual Interactions with the Query Cache are where the structure of your Query Keys is most important. Many of those interaction methods, like \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://react-query.tanstack.com/reference/QueryClient#queryclientinvalidatequeries\"\n  }, \"invalidateQueries\"), \" or \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://react-query.tanstack.com/reference/QueryClient#queryclientsetqueriesdata\"\n  }, \"setQueriesData\"), \" support \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://react-query.tanstack.com/guides/filters#query-filters\"\n  }, \"Query Filters\"), \", which allow you to fuzzily match your Query Keys.\")), mdx(\"p\", null, \"We've known for a long time that query filters existed to make it easier to deal with query caches explicitly.\"), mdx(\"p\", null, \"However, I haven't used them much (or rigorously) in actual development. I remembered a few cases where I didn't manage \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"queryKey\"), \" properly in my app, or just invalidated things in a fuzzy way. It's a shame because it would have degraded the user experience.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"I have found these strategies to work best when your App becomes more complex, and they also scale quite well. You definitely don't need to do this for a Todo App \\uD83D\\uDE01.\")), mdx(\"p\", null, \"I think one of the reasons I feel comfortable with your technical writing is because you're so good at explaining the premise behind certain practices.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Yes, Query Keys can be a string, too, but to keep things unified, I like to always use Arrays. React Query will internally convert them to an Array anyway, so:\")), mdx(\"p\", null, \"When we moved to v4, we were only allowed to write array \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"queryKey\"), \", and even when we allowed strings, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"queryKey\"), \" was still an array.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Structure your Query Keys from \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"most generic\"), \" to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"most specific\"), \", with as many levels of granularity as you see fit in between. Here's how I would structure a todos list that allows for filterable lists as well as detail views:\")), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"ts\",\n    \"theme\": \"one-light\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"['todos', 'list', { filters: 'all' }][('todos', 'list', { filters: 'done' })][\\n  ('todos', 'detail', 1)\\n][('todos', 'detail', 2)];\"), \"\\n        \"), mdx(\"p\", null, \"This seems better cognitively, and I think the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://tkdodo.eu/blog/effective-react-query-keys#structure\"\n  }, \"provided example\"), \" would also look more declarative if the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"queryKey\"), \" wasn't framed this way.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"That's why I recommend one Query Key factory per feature. It's just a simple object with entries and functions that will produce query keys, which you can then use in your custom hooks. For the above example structure, it would look something like this:\")), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"ts\",\n    \"theme\": \"one-light\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"const todoKeys = {\\n  all: ['todos'] as const,\\n  lists: () => [...todoKeys.all, 'list'] as const,\\n  list: (filters: string) => [...todoKeys.lists(), { filters }] as const,\\n  details: () => [...todoKeys.all, 'detail'] as const,\\n  detail: (id: number) => [...todoKeys.details(), id] as const,\\n};\"), \"\\n        \"), mdx(\"p\", null, \"You're telling me to create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"queryKey\"), \" factory to characterize my data, which seems like a good idea, especially for larger projects.\"), mdx(\"p\", null, \"As an aside, I've seen some people use `queryKeys in practice to automatically separate things like URL endpoints and request bodies, and I've wondered if that's a good practice.\"), mdx(\"p\", null, \"I think we should write the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"queryKey\"), \" as a concept that can be manipulated and understood by the client to some extent, based on the information we get from the server, so that it's easier to deal with, and it creates a layer of client-centricity around the data.\"), mdx(\"p\", null, \"The idea of having to remember the URL of an API request to explicitly handle a query... can cause brain freeze, so it would be nice to have a factory of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"queryKey\"), \"s that are based on information from the server and can be easily imported. If you don't create a factory, you need to make the things that go into the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"queryKey\"), \" simple and well-crafted so that it's useful for management. It seems to be a story of ease of recognition after all.\"), mdx(\"p\", null, \"It was interesting to see that I wasn't the only one interested in this topic, and that there were a lot of different contextual questions being asked in the comments. Here are some of the ones that stood out to me\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"if every key starts with the name of the feature, there shouldn't be any clashes unless you have features with the same name. It was rather a problem for us to have global query keys, because they can get quite large, and if you then copy-paste one line but don't change the query key prefix (it happens!), you'll get key duplications which are very hard to spot. I've been there and it took me hours to find\")), mdx(\"p\", null, \"When asked if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"queryKey\"), \" collocation can lead to duplicates, why not manage them globally, the answer is that it's important that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"queryKey\"), \"s are created in a way that ensures granularity because otherwise they become too large and hard to read.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"query key factory concept is very useful! how about using api baseUrl (with path parameter, query parameter) to query key? \\uD83D\\uDC40\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"yes, you can do that as well and then even leverage the defaultQueryFn as described here: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://react-query.tanstack.com/guides/default-query-function\"\n  }, \"default query function\"))), mdx(\"p\", null, \"From a library perspective, I don't think creating a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"queryKey\"), \" based on information from the server is a completely bad practice.\"), mdx(\"h1\", {\n    \"id\": \"8a-leveraging-the-query-function-context\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#8a-leveraging-the-query-function-context\",\n    \"aria-label\": \"8a leveraging the query function context permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"https://tkdodo.eu/blog/leveraging-the-query-function-context\"\n  }, \"8a. Leveraging the Query Function Context\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Don't use inline functions - leverage the Query Function Context given to you, and use a Query Key factory that produces object keys\")), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"ts\",\n    \"theme\": \"one-light\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"export const useTodos = () => {\\n  const { state, sorting } = useTodoParams();\\n\\n  // \\uD83D\\uDEA8 can you spot the mistake \\u2B07\\uFE0F\\n  return useQuery({\\n    queryKey: ['todos', state],\\n    queryFn: () => fetchTodos(state, sorting),\\n  });\\n};\"), \"\\n        \"), mdx(\"p\", null, \"For data requests that require multiple parameters, you can extend the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"queryFn\"), \" by continuing to add parameters to it, which makes sense to me because you have to modify both the arguments of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"queryFn\"), \" and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"queryKey\"), \" array at the same time, which can be a pain to manage when it gets too many and leaves room for mistakes, so the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"queryFunctionContext\"), \" pattern makes sense.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"QueryFunctionContext\"), \" is an object that is passed as argument to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"queryFn\"))), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"ts\",\n    \"theme\": \"one-light\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"const fetchTodos = async ({ queryKey }) => {\\n  // \\uD83D\\uDE80 we can get all params from the queryKey\\n  const [, state, sorting] = queryKey;\\n  const response = await axios.get(`todos/${state}?sorting=${sorting}`);\\n  return response.data;\\n};\\n\\nexport const useTodos = () => {\\n  const { state, sorting } = useTodoParams();\\n\\n  // \\u2705 no need to pass parameters manually\\n  return useQuery({\\n    queryKey: ['todos', state, sorting],\\n    queryFn: fetchTodos,\\n  });\\n};\"), \"\\n        \"), mdx(\"h1\", {\n    \"id\": \"9-placeholder-and-initial-data-in-react-query\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#9-placeholder-and-initial-data-in-react-query\",\n    \"aria-label\": \"9 placeholder and initial data in react query permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"https://tkdodo.eu/blog/placeholder-and-initial-data-in-react-query\"\n  }, \"9. Placeholder and Initial Data in React Query\")), mdx(\"p\", null, \"There's a lot of stuff here that I didn't know, so I just summarized the whole article.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Another way is to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"synchronously\"), \" pre-fill the cache with data that we think will potentially be right for our use-case, and for that, React Query offers two different yet similar approaches: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://tanstack.com/query/latest/docs/react/guides/placeholder-query-data\"\n  }, \"Placeholder Data\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://tanstack.com/query/latest/docs/react/guides/initial-query-data\"\n  }, \"Initial Data\"), \".\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"As already hinted, they both provide a way to pre-fill the cache with data that we have synchronously available. It further means that if either one of these is supplied, our query will not be in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"loading\"), \" state, but will go directly to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"success\"), \" state\")), mdx(\"p\", null, \"Actually, I didn't realize there was such a thing as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"placeholderData\"), \". What \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"placeholderData\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"initialData\"), \" have in common is that they skip the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"loading\"), \" state and go directly to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"success\"), \" when given.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"For each Query Key, there is only one cache entry. This is kinda obvious because part of what makes React Query great is the possibility to share the same data \\\"globally\\\" in our application.\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"An observer in React Query is, broadly speaking, a subscription created for one cache entry.\")), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cache\"), \" has only one entry per \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"queryKey\"), \", and an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"observer\"), \" can be multiple for a single \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"queryKey\"), \".\"), mdx(\"p\", null, \"This concept of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"observer\"), \" was new to me. When I was talking with my colleagues about how RQ works, we talked a lot about query as the basic unit. Even if I wrapped a query in a hook, I sometimes wondered \\\"why is the behavior different here even though the settings are the same?\\\".\"), mdx(\"p\", null, \"I think it's because the behavior of RQ is not based on query, but on query observer. Query and query observer are different.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InitialData\"), \" works on cache level, while \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"placeholderData\"), \" works on observer level. This has a couple of implications:\")), mdx(\"p\", null, \"We can say that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"initialData\"), \" exists at the cache level, while \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"placeholderData\"), \" exists at the observer level. Below is a summary of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://tkdodo.eu/blog/placeholder-and-initial-data-in-react-query#differences\"\n  }, \"this part\"), \".\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Persistence\", \"*\", \"*\", \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"initialData\"), \" is stored in the cache, but \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"placeholderData\"), \" is not.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Background refetches\", \"*\", \"*\", \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"initialData\"), \" is associated with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"staleTime\"), \", but \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"placeholderData\"), \" is not.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Error Transitions\", \"*\", \"*\", \": Failure to get \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"initialData\"), \" is handled like a normal background query error and the existing cache data is retained, but \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"placeholderData\"), \" is not handled as an error and the cache data is left as \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"undefined\"), \".\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"I personally like to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"initialData\"), \" when pre-filling a query from another query, and I use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"placeholderData\"), \" for everything else.\")), mdx(\"p\", null, \"It seems to me that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"initialData\"), \" could also be understood as \\\"propagating\\\" so that multiple observers can have the same data.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"What do you think will happen in each situation? I've hidden the answers so that you can try to come up with them for yourselves if you want before expanding them.\")), mdx(\"p\", null, \"I know it's a bit of a stretch, but I think this is a good point for a technical article.\"), mdx(\"h1\", {\n    \"id\": \"10-react-query-as-a-state-manager\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#10-react-query-as-a-state-manager\",\n    \"aria-label\": \"10 react query as a state manager permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"https://tkdodo.eu/blog/react-query-as-a-state-manager\"\n  }, \"10. React Query as a State Manager\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"React Query is loved by many for drastically simplifying data fetching in React applications. So it might come as a bit of a surprise if I tell you that React Query is in fact \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"NOT\"), \" a data fetching library.\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"React Query is an async state manager. It can manage any form of asynchronous state - it is happy as long as it gets a Promise.\")), mdx(\"p\", null, \"React Query is an \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Async state manager\"), \", not a Data fetching library. RQ knows very little about the network or the layer where asynchronous requests are made (things like offline mode), and data patching is really the responsibility of http clients like axios or ky.\"), mdx(\"p\", null, \"As long as the state that the RQ can store is provided via a promise, the RQ can actually have whatever data it wants without any data patching happening. This makes sense if you think about the web socket example from earlier.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Because React Query manages async state (or, in terms of data fetching: server state), it assumes that the frontend application doesn't \\\"own\\\" the data. And that's totally right. If we display data on the screen that we fetch from an API, we only display a \\\"snapshot\\\" of that data\")), mdx(\"p\", null, \"Embracing these unique points specific to fetching client application data into the implementation of the state management library seems to be the biggest difference between RQ and state management tools like Redux that are used to handling traditional asynchronous data.\"), mdx(\"p\", null, \"I think that these implementations provide ways to manage data as a time series (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"staleTime\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cacheTime\"), \"), the concept of SWR, and ways to manage React's lifecycle (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"refetchOnMount\"), \"), depending on the nature of the data element.\"), mdx(\"p\", null, \"In Redux, state was just state, and you had to create your own way of handling asynchronous data, like middleware or something.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The principle is that stale data is better than no data, because no data usually means a loading spinner, and this will be perceived as \\\"slow\\\" by users. At the same time, it will try to perform a background refetch to revalidate that data.\")), mdx(\"p\", null, \"Since the philosophy itself is based on SWR, it seems to me that using it properly and making the loading circle as invisible as possible to the user is the same way to use RQ properly.\"), mdx(\"p\", null, \"In this post, I'm going to say RQ is a state management library! but at the same time, I don't think it should be used or expected to be used like a state management library. I feel like the descriptions of features like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"smart refetches\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"staleTime\"), \" further down in the paragraph are saying that.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"This is mainly because \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"staleTime\"), \" defaults to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"zero\"), \", which means that every time you e.g. mount a new component instance, you will get a background refetch.\")), mdx(\"p\", null, \"Nowadays, I've been thinking about leaving \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"staleTime\"), \" as the default \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Inifinity\"), \" since I first set up RQ... because after all, the default of 0 is assuming the most basic situation and creates as much fetching as possible.\"), mdx(\"p\", null, \"It seems like a more optimal practice would be to keep it fresh as long as possible, and then create refetches and invalidations with explicit settings for the uses that need them, but I'm just guessing because I haven't tried it.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"What's going on here, I just fetched my data 2 seconds ago, why is there another network request happening? This is insane!\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"As long as data is fresh, it will always come from the cache only. You will not see a network request for fresh data, no matter how often you want to retrieve it.\")), mdx(\"p\", null, \"If you call two queries with the same \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"queryKey\"), \" in a row inside a React component without any other options, you will also get fetched twice. The data must remain fresh to avoid fetching.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"That changed a lot when hooks came around. You can now \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useContext\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useQuery\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useSelector\"), \" (if you're using redux) everywhere, and thus inject dependencies into your component. You can argue that doing so makes your component more coupled. You can also say that it's now more independent because you can move it around freely in your app, and it will just work on its own.\")), mdx(\"p\", null, \"I personally don't think that React Hooks are a means of DI, because I think the logic is structured in such a way that too many things are coupled together, but I also agree with what the article says is a tradeoff: it's not too easy to do DI with props.\"), mdx(\"h1\", {\n    \"id\": \"11-react-query-error-handling\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#11-react-query-error-handling\",\n    \"aria-label\": \"11 react query error handling permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"https://tkdodo.eu/blog/react-query-error-handling\"\n  }, \"11. React Query Error Handling\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"You see, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onError\"), \" callback on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useQuery\"), \" is called for every \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Observer\"), \", which means if you call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useTodos\"), \" twice in your application, you will get two error toasts, even though only one network request fails.\")), mdx(\"p\", null, \"Since errors are also handled on a per-observer basis, the onError callback is also called for as many observers as there are observers.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The global callbacks need to be provided when you create the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"QueryCache\"), \", which happens implicitly when you create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new QueryClient\"), \", but you can also customize that:\")), mdx(\"p\", null, \"I would expect the global form of error handling to be handled in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"queryClient\"), \" and the local form of error handling to be handled in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ErrorBoundary\"), \", and I could do it in the individual query.\"), mdx(\"p\", null, \"I feel like there needs to be a rule or something to better honor this principle, or a better design to handle error toasts. There may be a need to display something different than what is displayed globally for error toasts.\"), mdx(\"p\", null, \"(End)\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Using React Query in better ways","date":"2023년 12월 10일","description":"tkdodo React Query post commentary (1-11)","tags":["react","react-query"]}},"postSlugList":{"nodes":[{"frontmatter":{"slug":null}},{"frontmatter":{"slug":null}},{"frontmatter":{"slug":null}},{"frontmatter":{"slug":null}},{"frontmatter":{"slug":"olivia-rodrigo"}},{"frontmatter":{"slug":"olivia-rodrigo"}},{"frontmatter":{"slug":"2023-retorspect"}},{"frontmatter":{"slug":"2023-flexteam-restrospect"}},{"frontmatter":{"slug":"2023-flexteam-restrospect"}},{"frontmatter":{"slug":"2023-retorspect"}},{"frontmatter":{"slug":"tkdodo-react-query-commentary"}},{"frontmatter":{"slug":"tkdodo-react-query-commentary"}},{"frontmatter":{"slug":"on-stage-best"}},{"frontmatter":{"slug":"on-stage-best"}},{"frontmatter":{"slug":"nodejs-server-monitoring"}},{"frontmatter":{"slug":"nodejs-server-monitoring"}},{"frontmatter":{"slug":"i-can-do-this-all-day"}},{"frontmatter":{"slug":"i-can-do-this-all-day"}},{"frontmatter":{"slug":"retrospect-university"}},{"frontmatter":{"slug":"retrospect-university"}},{"frontmatter":{"slug":"module-federation-shared"}},{"frontmatter":{"slug":"module-federation-shared"}},{"frontmatter":{"slug":"tanjiro"}},{"frontmatter":{"slug":"tanjiro"}},{"frontmatter":{"slug":"module-federation-concepts"}},{"frontmatter":{"slug":"module-federation-concepts"}},{"frontmatter":{"slug":"eternal-sunshine"}},{"frontmatter":{"slug":"eternal-sunshine"}},{"frontmatter":{"slug":"business-driven"}},{"frontmatter":{"slug":"business-driven"}},{"frontmatter":{"slug":"uncertainty"}},{"frontmatter":{"slug":"uncertainty"}},{"frontmatter":{"slug":"runtime-integration-micro-frontends"}},{"frontmatter":{"slug":"runtime-integration-micro-frontends"}},{"frontmatter":{"slug":"tanstack-query-v4-preview"}},{"frontmatter":{"slug":"tanstack-query-v4-preview"}},{"frontmatter":{"slug":"writing-like-that"}},{"frontmatter":{"slug":"writing-like-that"}},{"frontmatter":{"slug":"2022-retorspect"}},{"frontmatter":{"slug":"2022-retorspect"}},{"frontmatter":{"slug":"monorepo-tooling"}},{"frontmatter":{"slug":"monorepo-tooling"}},{"frontmatter":{"slug":"break-up"}},{"frontmatter":{"slug":"break-up"}},{"frontmatter":{"slug":"sustainable-aimless"}},{"frontmatter":{"slug":"sustainable-aimless"}},{"frontmatter":{"slug":"job-searching-retrospect"}},{"frontmatter":{"slug":"job-searching-retrospect"}},{"frontmatter":{"slug":"2021-retorspect"}},{"frontmatter":{"slug":"2021-retorspect"}},{"frontmatter":{"slug":"web-accessiblity-virtuous-cycle"}},{"frontmatter":{"slug":"web-accessiblity-virtuous-cycle"}},{"frontmatter":{"slug":"frontend-tooling-ideas"}},{"frontmatter":{"slug":"frontend-tooling-ideas"}},{"frontmatter":{"slug":"suspense-argibraic-effect"}},{"frontmatter":{"slug":"suspense-argibraic-effect"}},{"frontmatter":{"slug":"packet-travel"}},{"frontmatter":{"slug":"packet-travel"}},{"frontmatter":{"slug":"dev-job-retrospect"}},{"frontmatter":{"slug":"dev-job-retrospect"}},{"frontmatter":{"slug":"redux-store-structure"}},{"frontmatter":{"slug":"redux-store-structure"}},{"frontmatter":{"slug":"react-native-ci-cd"}},{"frontmatter":{"slug":"react-native-ci-cd"}},{"frontmatter":{"slug":"like-legacy"}},{"frontmatter":{"slug":"like-legacy"}},{"frontmatter":{"slug":"what-type-of-developer-am-i"}},{"frontmatter":{"slug":"what-type-of-developer-am-i"}},{"frontmatter":{"slug":"how-to-minimize-redux-saga-typing"}},{"frontmatter":{"slug":"how-to-minimize-redux-saga-typing"}},{"frontmatter":{"slug":"how-to-use-redux-saga"}},{"frontmatter":{"slug":"how-to-use-redux-saga"}},{"frontmatter":{"slug":"github-actions-slack-bot"}},{"frontmatter":{"slug":"github-actions-slack-bot"}},{"frontmatter":{"slug":"frontend-infrastructure"}},{"frontmatter":{"slug":"frontend-infrastructure"}},{"frontmatter":{"slug":"react-query-preview"}},{"frontmatter":{"slug":"react-query-preview"}},{"frontmatter":{"slug":"keyboard-input"}},{"frontmatter":{"slug":"keyboard-input"}},{"frontmatter":{"slug":"precedent-bot-retrospect"}},{"frontmatter":{"slug":"precedent-bot-retrospect"}},{"frontmatter":{"slug":"nuxt-ssr"}},{"frontmatter":{"slug":"nuxt-ssr"}},{"frontmatter":{"slug":"async-console-log"}},{"frontmatter":{"slug":"async-console-log"}},{"frontmatter":{"slug":"thought-ts"}},{"frontmatter":{"slug":"thought-ts"}},{"frontmatter":{"slug":"dev-job-after-junior"}},{"frontmatter":{"slug":"dev-job-after-junior"}},{"frontmatter":{"slug":"protect-var-against-undefined"}},{"frontmatter":{"slug":"protect-var-against-undefined"}},{"frontmatter":{"slug":"school-personal-project"}},{"frontmatter":{"slug":"school-personal-project"}},{"frontmatter":{"slug":"vue-comp-test"}},{"frontmatter":{"slug":"vue-comp-test"}},{"frontmatter":{"slug":"dom-pos-scroll"}},{"frontmatter":{"slug":"dom-pos-scroll"}},{"frontmatter":{"slug":"2020-retorspect"}},{"frontmatter":{"slug":"2020-retorspect"}},{"frontmatter":{"slug":"function-props-vuejs"}},{"frontmatter":{"slug":"function-props-vuejs"}},{"frontmatter":{"slug":"cra-webpack-config"}},{"frontmatter":{"slug":"cra-webpack-config"}},{"frontmatter":{"slug":"react-component-this"}},{"frontmatter":{"slug":"react-component-this"}},{"frontmatter":{"slug":"git-start"}},{"frontmatter":{"slug":"git-start"}},{"frontmatter":{"slug":"js-pure-function"}},{"frontmatter":{"slug":"js-pure-function"}},{"frontmatter":{"slug":"hufs-semester-clock"}},{"frontmatter":{"slug":"hufs-semester-clock"}},{"frontmatter":{"slug":"js-map"}},{"frontmatter":{"slug":"js-map"}},{"frontmatter":{"slug":"why-dev"}},{"frontmatter":{"slug":"why-dev"}}]}},"pageContext":{"id":"6ffd3caa-6ee9-5fc6-aa1c-bf1afbe6d7d5","frontmatter__slug":"tkdodo-react-query-commentary","__params":{"frontmatter__slug":"tkdodo-react-query-commentary"}}},"staticQueryHashes":["1865044719"]}