{"componentChunkName":"component---src-pages-en-posts-mdx-frontmatter-slug-tsx","path":"/en/posts/coupling/","result":{"data":{"post":{"id":"bf0eee1c-ffdb-51a5-848b-031241df11ee","slug":"coupling-en","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Types of Coupling Between Software Modules\",\n  \"description\": \"from <Reliable Software Through Composite Design>\",\n  \"date\": \"2024-10-22T00:00:00.000Z\",\n  \"category\": \"tech\",\n  \"slug\": \"coupling\",\n  \"tags\": [\"code\", \"theory\"],\n  \"lang\": \"en\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I found the classification of software cohesion and coupling types presented in Glenford J. Myers' 1975 book \\\"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.amazon.com/Reliable-software-through-composite-design/dp/0884052842\"\n  }, \"\\\"Reliable software through composite design\\\"\"), \" quite fascinating.\"), mdx(\"p\", null, \"Rather than just knowing it in theory, I was able to conceptualize the types of highly coupled code that I had become familiar with through development.\"), mdx(\"p\", null, \"I gathered related content from Wikipedia and recent books I've read, and organized it with examples from my field of web client development.\"), mdx(\"p\", null, \"This post focuses solely on coupling, not cohesion.\"), mdx(\"h1\", {\n    \"id\": \"coupling\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#coupling\",\n    \"aria-label\": \"coupling permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Coupling\"), mdx(\"p\", null, \"\\\"Coupling measures the degree of interdependence between modules. Good software has low coupling.\\\"\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Sorted from highest to lowest coupling\"), \": Data Coupling > Stamp Coupling > Control Coupling > External Coupling > Common Coupling > Content Coupling\")), mdx(\"h2\", {\n    \"id\": \"data-coupling\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#data-coupling\",\n    \"aria-label\": \"data coupling permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Data Coupling\"), mdx(\"p\", null, \"When the dependency between modules is based solely on data being passed, these modules are said to be data coupled. In data coupling, components communicate with each other independently through data.\"), mdx(\"p\", null, \"It is the weakest form of coupling. It occurs when components exchange the minimum necessary data to function independently.\"), mdx(\"p\", null, \"This reminds me of a React component that receives sharply defined immutable data types as props.\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"tsx\",\n    \"theme\": \"one-light\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"// React Component\\ntype UserProps = {\\n  name: string;\\n  age: number;\\n};\\n\\nconst UserProfile: React.FC<UserProps> = ({ name, age }) => {\\n  return (\\n    <div>\\n      <h1>{name}</h1>\\n      <p>Age: {age}</p>\\n    </div>\\n  );\\n};\\n\\n// Usage example\\n<UserProfile name=\\\"Alice\\\" age={30} />;\"), \"\\n        \"), mdx(\"h2\", {\n    \"id\": \"stamp-coupling\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#stamp-coupling\",\n    \"aria-label\": \"stamp coupling permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Stamp Coupling\"), mdx(\"p\", null, \"Stamp coupling occurs when a module passes an entire data structure to another module. It includes tramp data. It is also known as Data-Structured Coupling.\"), mdx(\"p\", null, \"This reminds me of a React component that receives an object of a specific type from an API response as props.\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"ts\",\n    \"theme\": \"one-light\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"// Data structure\\ntype User = {\\n  id: number;\\n  name: string;\\n  email: string;\\n  age: number;\\n};\\n\\n// React Component\\nconst UserDetail: React.FC<{ user: User }> = ({ user }) => {\\n  return (\\n    <div>\\n      <h1>{user.name}</h1>\\n      <p>Email: {user.email}</p>\\n      <p>Age: {user.age}</p>\\n    </div>\\n  );\\n};\\n\\n// Usage example\\nconst user = { id: 1, name: 'Alice', email: 'alice@example.com', age: 30 };\\n<UserDetail user={user} />;\"), \"\\n        \"), mdx(\"p\", null, \"Implementing it this way might lead to unnecessary data being passed to the component at certain points, but it allows you to reveal the meaning of the prop and impose type constraints.\"), mdx(\"p\", null, \"Data coupling does not use \\\"the structure of data,\\\" so it has a lower level of coupling than stamp coupling, but that doesn't necessarily mean data coupling is always better.\"), mdx(\"h2\", {\n    \"id\": \"control-coupling\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#control-coupling\",\n    \"aria-label\": \"control coupling permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Control Coupling\"), mdx(\"p\", null, \"When modules communicate by passing control information, they are said to be control coupled.\"), mdx(\"p\", null, \"You can think of a function where branching is controlled through an argument. The function receives a flag-like argument, which is control information, to decide what to do.\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"ts\",\n    \"theme\": \"one-light\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"// Function using a control flag\\nfunction processOrder(orderId: number, isExpress: boolean) {\\n  if (isExpress) {\\n    console.log(`Processing express order: ${orderId}`);\\n  } else {\\n    console.log(`Processing standard order: ${orderId}`);\\n  }\\n}\\n\\n// Usage example\\nprocessOrder(123, true);\"), \"\\n        \"), mdx(\"p\", null, \"Alternatively, you can think of a function that receives and calls a callback function. It receives the control information itself from the outside.\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"ts\",\n    \"theme\": \"one-light\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"// Function receiving a callback\\nfunction fetchData(url: string, callback: (data: any) => void) {\\n  // Simulating an API call\\n  setTimeout(() => {\\n    const data = { id: 1, name: 'Sample Data' };\\n    callback(data);\\n  }, 1000);\\n}\\n\\n// Usage example\\nfetchData('https://api.example.com/data', (data) => {\\n  console.log('Received data:', data);\\n});\"), \"\\n        \"), mdx(\"p\", null, \"Control coupling is often unavoidable from the perspective of feature separation and reuse when writing code. The degree to which control coupling is harmful depends on whether you need to know the implementation of the module.\"), mdx(\"p\", null, \"For example, if the code looks like this, you must know exactly what \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"control_flag\"), \" is. This is control coupling to avoid because the caller must know the implementation.\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"ts\",\n    \"theme\": \"one-light\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"// Function using an ambiguous control flag\\nfunction executeTask(taskId: number, controlFlag: string) {\\n  if (controlFlag === 'start') {\\n    console.log(`Starting task: ${taskId}`);\\n  } else if (controlFlag === 'stop') {\\n    console.log(`Stopping task: ${taskId}`);\\n  } else {\\n    console.log(`Unknown action for task: ${taskId}`);\\n  }\\n}\\n\\n// Usage example\\nexecuteTask(10, 'start');\"), \"\\n        \"), mdx(\"p\", null, \"On the other hand, the strategy pattern or a pattern using callback functions allows the control flow to be injected from the usage place, so less information about the implementation of the module to be called is needed.\"), mdx(\"p\", null, \"Such control coupling can be considered less harmful than the previous example.\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"ts\",\n    \"theme\": \"one-light\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"// Strategy pattern example\\ninterface PaymentStrategy {\\n  pay(amount: number): void;\\n}\\n\\nclass CreditCardPayment implements PaymentStrategy {\\n  pay(amount: number) {\\n    console.log(`Paid ${amount} using credit card.`);\\n  }\\n}\\n\\nclass PayPalPayment implements PaymentStrategy {\\n  pay(amount: number) {\\n    console.log(`Paid ${amount} using PayPal.`);\\n  }\\n}\\n\\nfunction processPayment(strategy: PaymentStrategy, amount: number) {\\n  strategy.pay(amount);\\n}\\n\\n// Usage example\\nconst paymentMethod = new CreditCardPayment();\\nprocessPayment(paymentMethod, 100);\"), \"\\n        \"), mdx(\"p\", null, \"However, even this way of receiving control flow from the outside can eventually increase coupling between modules if the implementation of the module becomes complex. Such coupling should only be used where necessary, where it is clear to receive and call the control flow, and where it can be fully utilized.\"), mdx(\"h2\", {\n    \"id\": \"external-coupling\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#external-coupling\",\n    \"aria-label\": \"external coupling permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"External Coupling\"), mdx(\"p\", null, \"In external coupling, modules depend on other modules or specific types of hardware outside the software being developed. You can think of a function that accesses the file system.\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"ts\",\n    \"theme\": \"one-light\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"import fs from 'fs';\\n\\n// Function accessing the external file system\\nfunction readConfigFile(filePath: string) {\\n  try {\\n    const data = fs.readFileSync(filePath, 'utf8');\\n    console.log('Config data:', data);\\n  } catch (err) {\\n    console.error('Error reading config file:', err);\\n  }\\n}\\n\\n// Usage example\\nreadConfigFile('./config.json');\"), \"\\n        \"), mdx(\"p\", null, \"External coupling opens up the possibility of being affected by the environment outside the software being developed, potentially impacting not only the coupled module but also other modules. Additionally, external systems can make it difficult to test the module.\"), mdx(\"p\", null, \"Not all external couplings necessarily affect other modules in the implementation.\"), mdx(\"p\", null, \"The common coupling explained below has a more definitive impact on one module affecting another due to the existence of shared data.\"), mdx(\"h2\", {\n    \"id\": \"common-coupling\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#common-coupling\",\n    \"aria-label\": \"common coupling permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Common Coupling\"), mdx(\"p\", null, \"When modules share a global state, they are said to be commonly coupled. You can think of several functions accessing a single global variable.\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"ts\",\n    \"theme\": \"one-light\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"// Global variable\\nlet globalCounter = 0;\\n\\nfunction incrementCounter() {\\n  globalCounter++;\\n  console.log('Counter incremented:', globalCounter);\\n}\\n\\nfunction resetCounter() {\\n  globalCounter = 0;\\n  console.log('Counter reset');\\n}\\n\\n// Usage example\\nincrementCounter();\\nincrementCounter();\\nresetCounter();\"), \"\\n        \"), mdx(\"p\", null, \"When a change is made to global data, you must examine the behavior of all modules accessing this data to understand why the state changed.\"), mdx(\"p\", null, \"In the previous control coupling, the data from the caller is coupled to the implementation of one module, but in common coupling, the data can be coupled to the implementation of multiple modules, creating a considerably complex situation.\"), mdx(\"p\", null, \"This makes module reuse difficult, reduces data access control capabilities, and is obviously not good for maintenance.\"), mdx(\"h2\", {\n    \"id\": \"content-coupling\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#content-coupling\",\n    \"aria-label\": \"content coupling permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Content Coupling\"), mdx(\"p\", null, \"Content coupling occurs when one module modifies the data of another module or when control flow is passed from one module to another.\"), mdx(\"p\", null, \"It is the worst form of coupling and should be avoided. Looking at the example below, you can intuitively see that it is far more problematic than other couplings.\"), mdx(\"p\", null, \"When a specific class directly changes the public member variables of another class, control flow for specific data is transferred from one class to another. This makes it difficult to predict the operation of the module and has a significant negative impact on maintenance.\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"ts\",\n    \"theme\": \"one-light\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"// Class A\\nclass ClassA {\\n  public data: number;\\n\\n  constructor(data: number) {\\n    this.data = data;\\n  }\\n\\n  public displayData() {\\n    console.log(`Data: ${this.data}`);\\n  }\\n}\\n\\n// Class B\\nclass ClassB {\\n  private classAInstance: ClassA;\\n\\n  constructor(classAInstance: ClassA) {\\n    this.classAInstance = classAInstance;\\n  }\\n\\n  public modifyData(newData: number) {\\n    // ClassB directly accesses and modifies the public member variable of ClassA\\n    this.classAInstance.data = newData;\\n    console.log(`Data modified to: ${this.classAInstance.data}`);\\n  }\\n}\\n\\n// Usage example\\nconst instanceA = new ClassA(10);\\nconst instanceB = new ClassB(instanceA);\\n\\ninstanceA.displayData(); // \\\"Data: 10\\\"\\ninstanceB.modifyData(20); // \\\"Data modified to: 20\\\"\\ninstanceA.displayData(); // \\\"Data: 20\\\"\"), \"\\n        \"), mdx(\"p\", null, \"Content coupling can occur when encapsulation or the intention of encapsulation is ignored and direct access is made to data in another module.\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"ts\",\n    \"theme\": \"one-light\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"class MyClass {\\n  private secret: string;\\n  constructor(secret: string) {\\n    this.secret = secret;\\n  }\\n  reveal() {\\n    return this.secret;\\n  }\\n}\\n\\nconst instance = new MyClass('mySecret');\\n\\n// In TypeScript, this will cause an error, but it can be bypassed using type assertion\\nconst secretValue = (instance as any).secret;\\n\\nconsole.log(secretValue); // \\\"mySecret\\\"\"), \"\\n        \"), mdx(\"p\", null, \"TypeScript's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"private\"), \" access modifier is valid during type checking to hide member variables. However, in the JavaScript runtime, which is transpiled, all member variables are public. Using this, you can forcibly access member variables hidden by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"private\"), \".\"), mdx(\"p\", null, \"It may be a rather absurd and extreme example. In the world of microservice architecture, content coupling becomes a bit more likely.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Content coupling describes a situation where a higher-level service reaches into the internals of a lower-level service to change its internal state. The most frequent occurrence of this situation is when an external service accesses and directly changes the database of another microservice. - Sam Newman, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Building Microservices\"))), mdx(\"h1\", {\n    \"id\": \"references\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#references\",\n    \"aria-label\": \"references permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"References\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://en.wikipedia.org/wiki/Coupling_(computer_programming)\"\n  }, \"Wikipedia - Coupling(computer_programming)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://m.yes24.com/Goods/Detail/125977771\"\n  }, \"Munetoshi Ishigawa, 2024, Guidelines for Writing Readable and Review-Friendly Code\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://m.yes24.com/Goods/Detail/119319406\"\n  }, \"Sam Newman, 2023, Building Microservices\"))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Types of Coupling Between Software Modules","date":"2024년 10월 22일","description":"from <Reliable Software Through Composite Design>","tags":["code","theory"]}},"postSlugList":{"nodes":[{"frontmatter":{"slug":null}},{"frontmatter":{"slug":null}},{"frontmatter":{"slug":null}},{"frontmatter":{"slug":null}},{"frontmatter":{"slug":"coupling"}},{"frontmatter":{"slug":"coupling"}},{"frontmatter":{"slug":"i-definitely-do-sth-wrong"}},{"frontmatter":{"slug":"i-definitely-do-sth-wrong"}},{"frontmatter":{"slug":"retrospect-running"}},{"frontmatter":{"slug":"retrospect-running"}},{"frontmatter":{"slug":"mad-max"}},{"frontmatter":{"slug":"mad-max"}},{"frontmatter":{"slug":"how-to-growth"}},{"frontmatter":{"slug":"how-to-growth"}},{"frontmatter":{"slug":"olivia-rodrigo"}},{"frontmatter":{"slug":"olivia-rodrigo"}},{"frontmatter":{"slug":"2023-flexteam-restrospect"}},{"frontmatter":{"slug":"2023-retorspect"}},{"frontmatter":{"slug":"2023-flexteam-restrospect"}},{"frontmatter":{"slug":"2023-retorspect"}},{"frontmatter":{"slug":"tkdodo-react-query-commentary"}},{"frontmatter":{"slug":"tkdodo-react-query-commentary"}},{"frontmatter":{"slug":"on-stage-best"}},{"frontmatter":{"slug":"on-stage-best"}},{"frontmatter":{"slug":"nodejs-server-monitoring"}},{"frontmatter":{"slug":"nodejs-server-monitoring"}},{"frontmatter":{"slug":"i-can-do-this-all-day"}},{"frontmatter":{"slug":"i-can-do-this-all-day"}},{"frontmatter":{"slug":"retrospect-university"}},{"frontmatter":{"slug":"retrospect-university"}},{"frontmatter":{"slug":"module-federation-shared"}},{"frontmatter":{"slug":"module-federation-shared"}},{"frontmatter":{"slug":"tanjiro"}},{"frontmatter":{"slug":"tanjiro"}},{"frontmatter":{"slug":"module-federation-concepts"}},{"frontmatter":{"slug":"module-federation-concepts"}},{"frontmatter":{"slug":"eternal-sunshine"}},{"frontmatter":{"slug":"eternal-sunshine"}},{"frontmatter":{"slug":"business-driven"}},{"frontmatter":{"slug":"business-driven"}},{"frontmatter":{"slug":"uncertainty"}},{"frontmatter":{"slug":"uncertainty"}},{"frontmatter":{"slug":"runtime-integration-micro-frontends"}},{"frontmatter":{"slug":"runtime-integration-micro-frontends"}},{"frontmatter":{"slug":"tanstack-query-v4-preview"}},{"frontmatter":{"slug":"tanstack-query-v4-preview"}},{"frontmatter":{"slug":"writing-like-that"}},{"frontmatter":{"slug":"writing-like-that"}},{"frontmatter":{"slug":"2022-retorspect"}},{"frontmatter":{"slug":"2022-retorspect"}},{"frontmatter":{"slug":"monorepo-tooling"}},{"frontmatter":{"slug":"monorepo-tooling"}},{"frontmatter":{"slug":"break-up"}},{"frontmatter":{"slug":"break-up"}},{"frontmatter":{"slug":"sustainable-aimless"}},{"frontmatter":{"slug":"sustainable-aimless"}},{"frontmatter":{"slug":"job-searching-retrospect"}},{"frontmatter":{"slug":"job-searching-retrospect"}},{"frontmatter":{"slug":"2021-retorspect"}},{"frontmatter":{"slug":"2021-retorspect"}},{"frontmatter":{"slug":"web-accessiblity-virtuous-cycle"}},{"frontmatter":{"slug":"web-accessiblity-virtuous-cycle"}},{"frontmatter":{"slug":"frontend-tooling-ideas"}},{"frontmatter":{"slug":"frontend-tooling-ideas"}},{"frontmatter":{"slug":"suspense-argibraic-effect"}},{"frontmatter":{"slug":"suspense-argibraic-effect"}},{"frontmatter":{"slug":"packet-travel"}},{"frontmatter":{"slug":"packet-travel"}},{"frontmatter":{"slug":"dev-job-retrospect"}},{"frontmatter":{"slug":"dev-job-retrospect"}},{"frontmatter":{"slug":"redux-store-structure"}},{"frontmatter":{"slug":"redux-store-structure"}},{"frontmatter":{"slug":"react-native-ci-cd"}},{"frontmatter":{"slug":"react-native-ci-cd"}},{"frontmatter":{"slug":"like-legacy"}},{"frontmatter":{"slug":"like-legacy"}},{"frontmatter":{"slug":"what-type-of-developer-am-i"}},{"frontmatter":{"slug":"what-type-of-developer-am-i"}},{"frontmatter":{"slug":"how-to-minimize-redux-saga-typing"}},{"frontmatter":{"slug":"how-to-minimize-redux-saga-typing"}},{"frontmatter":{"slug":"how-to-use-redux-saga"}},{"frontmatter":{"slug":"how-to-use-redux-saga"}},{"frontmatter":{"slug":"github-actions-slack-bot"}},{"frontmatter":{"slug":"github-actions-slack-bot"}},{"frontmatter":{"slug":"frontend-infrastructure"}},{"frontmatter":{"slug":"frontend-infrastructure"}},{"frontmatter":{"slug":"react-query-preview"}},{"frontmatter":{"slug":"react-query-preview"}},{"frontmatter":{"slug":"keyboard-input"}},{"frontmatter":{"slug":"keyboard-input"}},{"frontmatter":{"slug":"precedent-bot-retrospect"}},{"frontmatter":{"slug":"precedent-bot-retrospect"}},{"frontmatter":{"slug":"nuxt-ssr"}},{"frontmatter":{"slug":"nuxt-ssr"}},{"frontmatter":{"slug":"async-console-log"}},{"frontmatter":{"slug":"async-console-log"}},{"frontmatter":{"slug":"thought-ts"}},{"frontmatter":{"slug":"thought-ts"}},{"frontmatter":{"slug":"dev-job-after-junior"}},{"frontmatter":{"slug":"dev-job-after-junior"}},{"frontmatter":{"slug":"protect-var-against-undefined"}},{"frontmatter":{"slug":"protect-var-against-undefined"}},{"frontmatter":{"slug":"school-personal-project"}},{"frontmatter":{"slug":"school-personal-project"}},{"frontmatter":{"slug":"vue-comp-test"}},{"frontmatter":{"slug":"vue-comp-test"}},{"frontmatter":{"slug":"dom-pos-scroll"}},{"frontmatter":{"slug":"dom-pos-scroll"}},{"frontmatter":{"slug":"2020-retorspect"}},{"frontmatter":{"slug":"2020-retorspect"}},{"frontmatter":{"slug":"function-props-vuejs"}},{"frontmatter":{"slug":"function-props-vuejs"}},{"frontmatter":{"slug":"cra-webpack-config"}},{"frontmatter":{"slug":"cra-webpack-config"}},{"frontmatter":{"slug":"react-component-this"}},{"frontmatter":{"slug":"react-component-this"}},{"frontmatter":{"slug":"git-start"}},{"frontmatter":{"slug":"git-start"}},{"frontmatter":{"slug":"js-pure-function"}},{"frontmatter":{"slug":"js-pure-function"}},{"frontmatter":{"slug":"hufs-semester-clock"}},{"frontmatter":{"slug":"hufs-semester-clock"}},{"frontmatter":{"slug":"js-map"}},{"frontmatter":{"slug":"js-map"}},{"frontmatter":{"slug":"why-dev"}},{"frontmatter":{"slug":"why-dev"}}]}},"pageContext":{"id":"af966001-2b56-528a-850a-2c4277dfab77","frontmatter__slug":"coupling","__params":{"frontmatter__slug":"coupling"}}},"staticQueryHashes":["1865044719"]}